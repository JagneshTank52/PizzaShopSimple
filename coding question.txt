using System;
using System.Collections.Generic;
using System.Text;

namespace InterviewProblems
{
    class Program
    {
        static void Main(string[] args)
        {
            // 2. String Compression
            string input = "aaabbcddddd";
            string compressed = CompressString(input);
            Console.WriteLine($"Original: {input}");
            Console.WriteLine($"Compressed: {compressed}");

            // 3. Find Pairs with Given Sum in an Array
            int[] arr = { 2, 7, 11, 15, -2, 4 };
            int target = 9;
            var pairs = FindPairsWithSum(arr, target);
            Console.WriteLine("\nPairs with sum " + target + ":");
            foreach (var pair in pairs)
            {
                Console.WriteLine($"({pair.Item1}, {pair.Item2})");
            }

            // 4. Check if a String is a Valid Anagram
            string s1 = "listen";
            string s2 = "silent";
            bool isAnagram = IsAnagram(s1, s2);
            Console.WriteLine($"\nAre \"{s1}\" and \"{s2}\" anagrams? {isAnagram}");

            // 5. Find First Non-Repeating Character in a String
            string input2 = "aabbcdeff";
            char? firstUnique = FirstNonRepeatingChar(input2);
            Console.WriteLine($"\nFirst non-repeating character in \"{input2}\": {firstUnique}");

            // 6. Find Majority Element in an Array using Boyer-Moore Voting Algorithm
            int[] arr2 = { 3, 3, 4, 2, 3, 3, 3, 1 };
            int? majority = FindMajorityElement(arr2);
            Console.WriteLine($"\nMajority element in the array: {majority}");
        }

        // 2. String Compression
        // Compress the string by replacing consecutive characters with the character followed by its count.
        // If the compressed string is not shorter, return the original.
        static string CompressString(string str)
        {
            if (string.IsNullOrEmpty(str))
                return str;

            StringBuilder compressed = new StringBuilder();
            int count = 1;
            for (int i = 1; i < str.Length; i++)
            {
                if (str[i] == str[i - 1])
                {
                    count++;
                }
                else
                {
                    compressed.Append(str[i - 1]);
                    compressed.Append(count);
                    count = 1;
                }
            }
            // Append the last character and its count
            compressed.Append(str[str.Length - 1]);
            compressed.Append(count);

            string result = compressed.ToString();
            return result.Length < str.Length ? result : str;
        }

        // 3. Find Pairs with Given Sum in an Array
        // Return all unique pairs (order does not matter) that add up to target sum.
        // Constraint: O(N) time using HashSet.
        static List<Tuple<int, int>> FindPairsWithSum(int[] arr, int target)
        {
            List<Tuple<int, int>> result = new List<Tuple<int, int>>();
            HashSet<int> seen = new HashSet<int>();
            // To avoid duplicates, store pairs as a string "min,max"
            HashSet<string> usedPairs = new HashSet<string>();

            foreach (int num in arr)
            {
                int complement = target - num;
                if (seen.Contains(complement))
                {
                    // Order the pair so that the smaller number comes first.
                    int first = Math.Min(num, complement);
                    int second = Math.Max(num, complement);
                    string pairKey = first + "," + second;
                    if (!usedPairs.Contains(pairKey))
                    {
                        result.Add(new Tuple<int, int>(first, second));
                        usedPairs.Add(pairKey);
                    }
                }
                seen.Add(num);
            }
            return result;
        }

        // 4. Check if a String is a Valid Anagram
        // Return true if both strings have the same characters with the same frequency.
        static bool IsAnagram(string s1, string s2)
        {
            if (s1.Length != s2.Length)
                return false;

            Dictionary<char, int> charCount = new Dictionary<char, int>();
            foreach (char c in s1)
            {
                if (charCount.ContainsKey(c))
                    charCount[c]++;
                else
                    charCount[c] = 1;
            }

            foreach (char c in s2)
            {
                if (!charCount.ContainsKey(c))
                    return false;
                charCount[c]--;
                if (charCount[c] < 0)
                    return false;
            }

            return true;
        }

        // 5. Find First Non-Repeating Character in a String
        // Constraint: O(N) time using Dictionary (HashMap)
        static char? FirstNonRepeatingChar(string str)
        {
            Dictionary<char, int> frequency = new Dictionary<char, int>();
            foreach (char c in str)
            {
                if (frequency.ContainsKey(c))
                    frequency[c]++;
                else
                    frequency[c] = 1;
            }

            foreach (char c in str)
            {
                if (frequency[c] == 1)
                    return c;
            }
            return null; // if all characters are repeating
        }

        // 6. Find Majority Element in an Array using Boyer-Moore Voting Algorithm
        // Returns the majority element if it exists.
        static int? FindMajorityElement(int[] arr)
        {
            int candidate = 0, count = 0;
            foreach (int num in arr)
            {
                if (count == 0)
                {
                    candidate = num;
                    count = 1;
                }
                else if (num == candidate)
                {
                    count++;
                }
                else
                {
                    count--;
                }
            }

            // Optional: Verify that candidate is actually the majority element
            count = 0;
            foreach (int num in arr)
            {
                if (num == candidate)
                    count++;
            }
            return count > arr.Length / 2 ? (int?)candidate : null;
        }
    }
}