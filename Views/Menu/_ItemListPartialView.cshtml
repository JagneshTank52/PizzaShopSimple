@using PizzaShop.Entity.ViewModels.MenuVM
@using PizzaShop.Service.Helper

@model PaginatedList<ItemListVM>
<table class="table">
    <thead>
    <tr>
        <th scope="col">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value=""
                    id="headerChek">
            </div>
        </th>
        <th scope="col">
            Name
        </th>
        <th scope="col">Item Type</th>
        <th scope="col">Rate</th>
        <th scope="col">Quantity</th>
        <th scope="col">Avaliablity</th>
        <th scope="col">Action </th>
    </tr>
    </thead>
    <tbody id="table">
   
        @foreach(var item in Model)
        {
            <tr>
                <td scope="row" style="width: 100px;">
                    <div class="form-check">
                        <input class="form-check-input item-checkbox" type="checkbox" value=""
                            id="chekbox" data-id=@item.ItemId>
                    </div>
                </td>
                <td>
                    <span class="me-1">
                        <img src="../images/dining-menu.png" height="30" width="30" alt="">
                    </span>
                    <span>
                        @item.ItemName
                    </span>
                </td>
                <td>
                    <img src= @(
                        item.ItemTypeId switch {
                        1 => "../images/veg-icon.svg",
                        2 => "../images/non-veg-icon.svg",
                        3 => "../images/vegan-icon.svg",
                        _ => "../images/veg-icon.svg"
                    })
                    height="20" width="20" alt="">
                </td>
                <td>
                   @item.ItemRate
                </td>
                <td>
                    @item.ItemQuantity
                </td>
                <td>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch"
                            id="flexSwitchCheckDefault">
                    </div>
                </td>
                <td>
                    <span>
                        <i class="bi bi-pen me-3" data-bs-toggle="modal" data-bs-target="#itemModel" onclick=getItemForm(@item.ItemId)></i>
                    </span>
                    <span>
                        <i class="bi bi-trash" data-bs-toggle="modal"
                            data-bs-target="#delete-item" onclick=deleteItem(@item.ItemId)></i>
                    </span>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="col-12 d-flex flex-column flex-sm-row align-items-start align-items-sm-center justify-content-center justify-content-sm-end "
                        style="gap: 10px;">
    <div class="d-flex flex-row align-items-center">
        <h6 class="mb-0 me-1">Items per page</h5>
             <select class="form-select w-auto me-2" id="itemPageSize"  aria-label="Default select example">
                    <option value="3" selected="@(Model.PageSize == 3 ? "selected" : null)">3</option>
                    <option value="5" selected="@(Model.PageSize == 5 ? "selected" : null)">5</option>
                    <option value="10" selected="@(Model.PageSize == 10 ? "selected" : null)">15</option>
                    <option value="20" selected="@(Model.PageSize == 20 ? "selected" : null)">20</option>
                    <option value="25" selected="@(Model.PageSize == 25 ? "selected" : null)">25</option>
                    @* <option value="3">3</option>
                    <option value="5" >5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="25">25</option> *@
                </select>
    </div>
    <div class="d-flex flex-row align-items-center">
        <h5 class="mb-0 me-1">Showing 1-5 0f 5</h5>
        <ul class="pagination justify-content-end mb-0">
            @if (Model.TotalPages > 1)
            {
                    <li class="page-item @(Model.PageIndex > 1 ? " " : "disabled")">
                        <a class="page-link" id="previous"aria-label="Previous">
                            <span aria-hidden="true"><i class="bi bi-caret-left-fill" style="color: var(--primary-color);"></i> </span>
                        </a>
                    </li>
            
                <li class="page-item @(Model.PageIndex < Model.TotalPages? " " : "disabled")">
                    <a class="page-link" id="next" aria-label="Next">
                        <span aria-hidden="true"> <i class="bi bi-caret-right-fill" style="color: var(--primary-color);">  </i> </span>
                    </a>
                </li>
            }
        </ul>
    </div>
</div>


<script>
    $(document).ready(function () {
        restoreCheckbox();
    });
    
    @* Restore Check box *@
    function restoreCheckbox(){
        let selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];
        console.log("restoreCheckbox checkbox called");
        $(".item-checkbox").each(function(){
        const id = $(this).data('id');
        console.log(id);
        if (selectedItems.includes(id)) {
            $(this).prop('checked', true);
        }
        });
        console.log("finish");
        updateHeaderCheck();
    };
    
    @* single item selected *@
    $(document).on('change', ".item-checkbox", function () {
        let selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];
    const id = $(this).data('id');
    if ($(this).prop("checked")) {
        if (!selectedItems.includes(id)) {
            selectedItems.push(id);
        }
    } else {
        selectedItems = selectedItems.filter(item => item !== id);
    }

    localStorage.setItem('selectedItems', JSON.stringify(selectedItems));
    updateHeaderCheck();
    });

    @* Check header wise check all check box *@
    $("#headerChek").change(function() {
         let selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];
        console.log("isChecked")
        var isChecked = $(this).prop("checked");
        console.log("Is all checked")
        $(".item-checkbox").prop("checked", isChecked);

        $(".item-checkbox").each(function(){
            const id = $(this).data('id');
            if (isChecked && !selectedItems.includes(id)) {
                selectedItems.push(id);
            }
            else if(!isChecked){
                selectedItems = selectedItems.filter(item => item !== id);
            }
        });

        localStorage.setItem('selectedItems', JSON.stringify(selectedItems));
    });

    function updateHeaderCheck() {
    const totalCheckboxes = $(".item-checkbox").length;
    const checkedCheckboxes = $(".item-checkbox:checked").length;
    $("#headerCheck").prop('checked', totalCheckboxes === checkedCheckboxes);
    }

</script>